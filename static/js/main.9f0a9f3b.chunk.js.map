{"version":3,"sources":["components/Card/Card.module.scss","assets/logo.svg","components/Header/Header.module.scss","components/Main/Main.module.scss","components/Footer/Footer.module.scss","components/Sidebar/Sidebar.module.scss","components/Cards/Cards.module.scss","components/Header/Header.tsx","components/Main/Main.tsx","components/Footer/Footer.tsx","components/SelectField/SelectField.tsx","api/api.ts","helpers/helpers.ts","stores/movieStore.ts","contexts/index.tsx","hooks/use-stores.tsx","containers/SortBy/SortBy.tsx","containers/FilterByGenre/FilterByGenre.tsx","components/RangeField/RangeField.tsx","containers/UserScore/UserScore.tsx","components/Sidebar/Sidebar.tsx","components/Card/Card.tsx","components/Loading/Loading.tsx","components/Cards/Cards.tsx","components/Title/Title.tsx","components/Layout/Layout.tsx","containers/App/App.tsx","index.tsx"],"names":["module","exports","Header","className","s","header","src","Logo","alt","Main","props","main","children","Footer","footer","SelectField","options","value","isMulti","change","placeholder","defaultValue","onChange","API","axios","create","baseURL","interceptors","request","use","config","params","api_key","process","error","Promise","reject","filter","type","movies","filterValue","filtered","length","movie","every","id","genre_ids","includes","vote_average","MovieStore","action","bound","nowPlaying","genres","movieSortOrder","movieChosenGenres","userScore","status","this","fetchListMovieGenres","nextPage","fetchNowPlayingMovies","get","page","then","response","results","data","catch","err","console","finally","sortOrder","Boolean","total_pages","result","orderBy","b","popularity","release_date","title","Error","sort","computed","decorate","observable","storesContext","React","createContext","movieStore","useStores","useContext","SortBy","observer","label","option","changeSortOrder","FilterByGenre","map","genre","name","valuesFormated","reduce","acc","cur","some","el","changeChosenGenres","useStyles","makeStyles","root","width","p","fontFamily","slider","color","valuetext","RangeField","classes","Typography","gutterBottom","Slider","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","min","max","event","UserScore","changeUserScore","debounce","Sidebar","sidebar","Card","wrapper","card","poster_path","description","genresText","join","theme","createStyles","height","margin","justifyContent","display","Loading","CircularProgress","Cards","pageStart","loadMore","fetchData","hasMore","loader","key","cards","item","ids","getGenresText","Title","Layout","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f0a9f3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Card_wrapper__1V7DQ\",\"card\":\"Card_card__35wN0\",\"description\":\"Card_description__33vK6\",\"title\":\"Card_title__Ip0in\"};","module.exports = __webpack_public_path__ + \"static/media/logo.31d26327.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__3JhNz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__3qUkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__2PUIK\"};","import React from \"react\";\nimport Logo from \"../../assets/logo.svg\";\nimport s from \"./Header.module.scss\";\n\nconst Header: React.FC = (): JSX.Element => {\n  return (\n    <header className={s.header}>\n      <img src={Logo} alt=\"themoviedb_logo\" />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport s from \"./Main.module.scss\";\n\nconst Main: React.FC = (props): JSX.Element => {\n  return <main className={s.main}>{props.children}</main>;\n};\n\nexport default Main;\n","import React from \"react\";\nimport Logo from \"../../assets/logo.svg\";\nimport s from \"./Footer.module.scss\";\n\nconst Footer: React.FC = (props): JSX.Element => {\n  return (\n    <footer className={s.footer}>\n      <img src={Logo} alt=\"themoviedb_logo\" />\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Select from \"react-select\";\n\nexport type Option = {\n  value: any;\n  label: any;\n};\n\ninterface Props {\n  options: Option[];\n  value: any;\n  change: (option: any) => void;\n  isMulti?: boolean;\n  placeholder?: string;\n}\n\nconst SelectField: React.FC<Props> = ({\n  options,\n  value,\n  isMulti = false,\n  change,\n  placeholder,\n}): JSX.Element => {\n  return (\n    <Select\n      options={options}\n      defaultValue={value}\n      onChange={change}\n      isMulti={isMulti}\n      placeholder={placeholder}\n    />\n  );\n};\n\nexport default SelectField;\n","import axios from \"axios\";\n\nexport const API = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n});\n\nAPI.interceptors.request.use(\n  (config) =>\n    (config = {\n      ...config,\n      params: { ...config.params, api_key: process.env.REACT_APP_TMDb_API_KEY },\n    }),\n  (error) => Promise.reject(error)\n);\n","import { orderBy } from \"lodash\";\nimport { SearchResultModel, SortOrder } from \"../models\";\n\nexport type FilterType = \"ByGenres\" | \"ByUserScore\";\n/**\n * the outsourced function, that makes sorting movies on a page\n *\n */\nexport const sort = (movies: SearchResultModel[], sortOrder: SortOrder) => {\n  if (sortOrder === \"Popularity Descending\") {\n    return orderBy(movies, (b) => b.popularity, \"desc\");\n  } else if (sortOrder === \"Popularity Ascending\") {\n    return orderBy(movies, (b) => b.popularity, \"asc\");\n  } else if (sortOrder === \"Rating Descending\") {\n    return orderBy(movies, (b) => b.vote_average, \"desc\");\n  } else if (sortOrder === \"Rating Ascending\") {\n    return orderBy(movies, (b) => b.vote_average, \"asc\");\n  } else if (sortOrder === \"Release Date Descending\") {\n    return orderBy(movies, (b) => b.release_date, \"desc\");\n  } else if (sortOrder === \"Release Date Ascending\") {\n    return orderBy(movies, (b) => b.release_date, \"asc\");\n  } else if (sortOrder === \"Title (A-Z)\") {\n    return orderBy(movies, (b) => b.title, \"asc\");\n  } else if (sortOrder === \"Title (Z-A)\") {\n    return orderBy(movies, (b) => b.title, \"desc\");\n  } else {\n    throw new Error(\"Unknown sort order\");\n  }\n};\n/**\n * the outsourced function, that makes filter movies on a page\n *\n */\nexport const filter = (\n  type: FilterType,\n  movies: SearchResultModel[],\n  filterValue: any\n) => {\n  let filtered = movies;\n\n  if (type === \"ByGenres\") {\n    if (filterValue?.length > 0) {\n      filtered = movies.filter((movie) => {\n        return filterValue?.every((id: number) => movie.genre_ids.includes(id));\n      });\n    }\n  } else if (type === \"ByUserScore\") {\n    filtered = filtered.filter((movie) => {\n      return movie.vote_average >= filterValue;\n    });\n  }\n  return filtered;\n};\n","import { observable, action, decorate, computed } from \"mobx\";\nimport {\n  NowPlayingModel,\n  GenreModel,\n  SearchResultModel,\n  Genre,\n  SortOrder,\n  Status,\n} from \"../models\";\nimport { API } from \"../api/api\";\nimport { sort, filter } from \"../helpers/helpers\";\n\nexport class MovieStore {\n  public nowPlaying: NowPlayingModel = null;\n  public genres: Genre[] = null;\n  public movieSortOrder: SortOrder = \"Popularity Descending\";\n  public movieChosenGenres: number[] = null;\n  public userScore: number | number[] = 3;\n  public status: Status = \"initial\";\n\n  constructor() {\n    this.fetchListMovieGenres();\n  }\n  /**\n   * init async method in store that fetch data from the server\n   *\n   */\n  @action.bound\n  fetchData(nextPage: number) {\n    this.fetchNowPlayingMovies(nextPage);\n  }\n\n  @action\n  async fetchNowPlayingMovies(nextPage: number) {\n    this.status = \"pending\";\n    return await API.get(\"movie/now_playing\", {\n      params: { page: nextPage },\n    })\n      .then((response: { data: NowPlayingModel }) => {\n        if (this.nowPlaying?.results) {\n          this.nowPlaying = {\n            ...response.data,\n            results: [...this.nowPlaying.results, ...response.data.results],\n          };\n        } else {\n          this.nowPlaying = response.data;\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        this.status = \"error\";\n      })\n      .finally(() => {\n        this.status = \"done\";\n      });\n  }\n\n  @action\n  async fetchListMovieGenres() {\n    return await API.get(\"genre/movie/list\")\n      .then((response) => {\n        return response.data;\n      })\n      .then((genres: GenreModel) => {\n        this.genres = genres.genres;\n      });\n  }\n\n  @computed get hasMore() {\n    if (this.status === \"initial\") {\n      return true;\n    } else {\n      return (\n        Boolean(this.nowPlaying?.total_pages - this.nowPlaying?.page) &&\n        this.status !== \"pending\"\n      );\n    }\n  }\n\n  @computed get result(): SearchResultModel[] {\n    if (this.nowPlaying) {\n      let result: SearchResultModel[] = this.nowPlaying.results;\n      result = filter(\"ByGenres\", result, this.movieChosenGenres);\n      result = filter(\"ByUserScore\", result, this.userScore);\n      result = sort(result, this.movieSortOrder);\n\n      return result;\n    }\n    return null;\n  }\n\n  /**\n   * change sorting order\n   *\n   */\n  @action.bound\n  changeSortOrder(sortOrder: SortOrder) {\n    this.movieSortOrder = sortOrder;\n  }\n  /**\n   * change genres filter\n   *\n   */\n  @action.bound\n  changeChosenGenres(movieChosenGenres: number[]) {\n    this.movieChosenGenres = movieChosenGenres;\n  }\n  /**\n   * change user score filter\n   *\n   */\n  @action.bound\n  changeUserScore(userScore: number | number[]) {\n    this.userScore = userScore;\n  }\n}\n\ndecorate(MovieStore, {\n  nowPlaying: observable,\n  genres: observable,\n  movieSortOrder: observable,\n  movieChosenGenres: observable,\n  userScore: observable,\n  status: observable,\n});\n","import React from \"react\";\nimport { MovieStore } from \"../stores\";\n\nexport const storesContext = React.createContext({\n  movieStore: new MovieStore(),\n});\n","import React from \"react\";\nimport { storesContext } from \"../contexts\";\n// there is hook for mobX store\nexport const useStores = () => React.useContext(storesContext);\n","import React from \"react\";\nimport SelectField, { Option } from \"../../components/SelectField/SelectField\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport { observer } from \"mobx-react\";\n/**\n * Container that config Select Field component\n *\n */\nconst SortBy: React.FC = observer(\n  (): JSX.Element => {\n    const { movieStore } = useStores();\n    const options: Option[] = [\n      { value: \"Popularity Descending\", label: \"Popularity Descending\" },\n      { value: \"Popularity Ascending\", label: \"Popularity Ascending\" },\n      { value: \"Rating Descending\", label: \"Rating Descending\" },\n      { value: \"Rating Ascending\", label: \"Rating Ascending\" },\n      { value: \"Release Date Descending\", label: \"Release Date Descending\" },\n      { value: \"Release Date Ascending\", label: \"Release Date Ascending\" },\n      { value: \"Title (A-Z)\", label: \"Title (A-Z)\" },\n      { value: \"Title (Z-A)\", label: \"Title (Z-A)\" },\n    ];\n\n    const handleChange = (option: Option): void => {\n      movieStore.changeSortOrder(option.value);\n    };\n    return (\n      <SelectField\n        options={options}\n        value={{\n          value: movieStore.movieSortOrder,\n          label: movieStore.movieSortOrder,\n        }}\n        change={handleChange}\n      />\n    );\n  }\n);\n\nexport default SortBy;\n","import React from \"react\";\nimport SelectField, { Option } from \"../../components/SelectField/SelectField\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport { observer } from \"mobx-react\";\n/**\n * Container that config Select Field component\n *\n */\nconst FilterByGenre: React.FC = observer(\n  (): JSX.Element => {\n    const { movieStore } = useStores();\n\n    // convert genres to Option[] type view\n    const options = movieStore.genres?.map((genre) => {\n      return {\n        value: genre.id,\n        label: genre.name,\n      };\n    });\n    // format from number or number[] genres ids to Option[] type\n    const valuesFormated: Option[] = movieStore.genres?.reduce((acc, cur) => {\n      if (movieStore.movieChosenGenres?.some((el) => el === cur.id)) {\n        return [...acc, { value: cur.id, label: cur.name }];\n      }\n      return acc;\n    }, []);\n    // simple handler that trigger change into store\n    const handleChange = (option: Option[]): void => {\n      const genres = option?.map((el) => el.value);\n      movieStore.changeChosenGenres(genres);\n    };\n    return (\n      <SelectField\n        options={options}\n        value={valuesFormated}\n        change={handleChange}\n        isMulti={true}\n        placeholder=\"Select genre...\"\n      />\n    );\n  }\n);\n\nexport default FilterByGenre;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\n\ninterface Props {\n  label: string;\n  value: number | number[];\n  change: (value: number | number[]) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n  },\n  p: {\n    fontFamily: \"Comic Neue, cursive\",\n  },\n  slider: {\n    color: \"#01b4e4\",\n  },\n});\n\nfunction valuetext(value: number) {\n  return `${value}°C`;\n}\n\nconst RangeField: React.FC<Props> = (props): JSX.Element => {\n  const classes = useStyles();\n  const onChangeHandler = (\n    event: React.ChangeEvent<{}>,\n    value: number | number[]\n  ) => {\n    props.change(value);\n  };\n  return (\n    <div className={classes.root}>\n      <Typography id=\"discrete-slider\" gutterBottom className={classes.p}>\n        {props.label}\n      </Typography>\n      <Slider\n        className={classes.slider}\n        defaultValue={props.value}\n        getAriaValueText={valuetext}\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        step={0.5}\n        marks\n        min={0}\n        max={10}\n        onChange={onChangeHandler}\n      />\n    </div>\n  );\n};\nexport default RangeField;\n","import React from \"react\";\nimport RangeField from \"../../components/RangeField/RangeField\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport { debounce } from \"lodash\";\n/**\n * Container that config RangeField component\n *\n */\nconst UserScore: React.FC = (props): JSX.Element => {\n  const { movieStore } = useStores();\n  const changeUserScore = debounce(movieStore.changeUserScore, 300);\n  return (\n    <RangeField\n      label=\"User Score\"\n      value={movieStore.userScore}\n      change={changeUserScore}\n    />\n  );\n};\n\nexport default UserScore;\n","import React from \"react\";\nimport s from \"./Sidebar.module.scss\";\nimport SortBy from \"../../containers/SortBy/SortBy\";\nimport FilterByGenre from \"../../containers/FilterByGenre/FilterByGenre\";\nimport UserScore from \"../../containers/UserScore/UserScore\";\n\nconst Sidebar = () => {\n  return (\n    <aside className={s.sidebar}>\n      <SortBy />\n      <FilterByGenre />\n      <UserScore />\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport s from \"./Card.module.scss\";\nimport { SearchResultModel } from \"../../models\";\n\ninterface Props {\n  movie: SearchResultModel;\n  genresText: string[];\n}\n\nconst Card: React.FC<Props> = observer(\n  (props): JSX.Element => {\n    const movie = props.movie;\n    return (\n      <div className={s.wrapper}>\n        <div className={s.card}>\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n            alt={movie.title}\n          />\n          <div className={s.description}>\n            <span className={s.title}>{movie.title}</span>\n            <span>{props.genresText?.join(\", \")}</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Card;\n","import React from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      height: \"50px\",\n      margin: \"20px\",\n      justifyContent: \"center\",\n      display: \"flex\",\n      color: \"#01b4e4\",\n    },\n  })\n);\n\nexport default function Loading() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress color=\"inherit\" />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useStores } from \"../../hooks/use-stores\";\nimport Card from \"../Card/Card\";\nimport s from \"./Cards.module.scss\";\nimport { Genre } from \"../../models\";\nimport Loading from \"../Loading/Loading\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst getGenresText = (genres: Genre[], ids: number[]): string[] => {\n  return genres?.reduce((acc, cur) => {\n    if (ids.some((id) => id === cur.id)) {\n      return [...acc, cur.name];\n    }\n    return acc;\n  }, []);\n};\n\nconst Cards = observer(() => {\n  const { movieStore } = useStores();\n  return (\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={movieStore.fetchData}\n      hasMore={movieStore.hasMore}\n      loader={<Loading key={\"Loading\"} />}\n    >\n      <div className={s.cards}>\n        {movieStore?.result?.map((item) => {\n          const genres: string[] = getGenresText(\n            movieStore.genres,\n            item.genre_ids\n          );\n          return <Card key={item.id} movie={item} genresText={genres} />;\n        })}\n      </div>\n    </InfiniteScroll>\n  );\n});\n\nexport default Cards;\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1 className=\"title__text\">Now Playing Movies</h1>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\nimport Header from \"../Header/Header\";\nimport Main from \"../Main/Main\";\nimport Footer from \"../Footer/Footer\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Cards from \"../Cards/Cards\";\nimport Title from \"../Title/Title\";\n\nconst Layout: React.FC = (): JSX.Element => {\n  return (\n    <>\n      <Header>Header</Header>\n\n      <div className=\"container\">\n        <Title />\n        <div className=\"content\">\n          <Sidebar />\n          <Main>\n            <Cards />\n          </Main>\n        </div>\n      </div>\n\n      <Footer>Footer</Footer>\n    </>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport Layout from \"../../components/Layout/Layout\";\nimport { observer } from \"mobx-react\";\n\nconst App = observer(() => {\n  return <Layout />;\n});\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App/App\";\nimport \"./scss/main.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}